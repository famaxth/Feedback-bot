from datetime import datetime

import db
import menu
from config import ADMIN_ID, BOT_TOKEN, CHANNEL_URL

import telebot
from telebot import types


db.init_db()
bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)


try:
    bot.send_message(
        ADMIN_ID, "<a><pre>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</pre></a>", parse_mode='HTML')
except Exception as e:
    print(e)


def send_answer_2(message, user_id, message_id):
    if message.chat.id == ADMIN_ID:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            bot.send_message(ADMIN_ID, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
                             reply_markup=menu.start_admin)
        else:
            try:
                html_teg = "<a></a>"
                for symbol in html_teg:
                    if symbol in message.text:
                        today = datetime.today()
                        date = today.strftime("%Y-%m-%d")
                        bot.send_message(
                            user_id, f"{message.text}", parse_mode='HTML')
                        bot.send_message(
                            ADMIN_ID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=menu.start_admin)
                        db.add_answer(date, message_id, user_id)
                        break
                else:
                    today = datetime.today()
                    date = today.strftime("%Y-%m-%d")
                    bot.send_message(user_id, f"{message.text}")
                    bot.send_message(
                        ADMIN_ID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=menu.start_admin)
                    db.add_answer(date, message_id, user_id)
            except Exception as e:
                print(e)
                bot.send_message(ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞!",
                                 reply_markup=menu.start_admin)


def send_answer_1(message):
    try:
        user_id = int(
            ((str(db.return_user_id(int(message.text)))).replace("(", "")).replace(",)", ""))
        message_id = message.text
        msg = bot.send_message(
            ADMIN_ID, "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML.")
        bot.register_next_step_handler(msg, send_answer_2, user_id, message_id)
    except:
        bot.send_message(
            ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=menu.start_admin)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    database = list(db.return_users_id())
    if str(message.chat.id) not in str(database):
        if message.chat.id == ADMIN_ID:
            bot.send_message(ADMIN_ID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é @por0vos1k",
                             parse_mode='HTML', reply_markup=menu.start_admin)
            today = datetime.today()
            date = today.strftime("%Y-%m-%d")
            db.add_user(message.from_user.first_name,
                        message.from_user.last_name, date, message.chat.id)
        else:
            bot.send_message(
                message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é @por0vos1k", parse_mode='HTML')
            today = datetime.today()
            date = today.strftime("%Y-%m-%d")
            db.add_user(message.from_user.first_name,
                        message.from_user.last_name, date, message.chat.id)
    else:
        if message.chat.id == ADMIN_ID:
            bot.send_message(ADMIN_ID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é @por0vos1k",
                             parse_mode='HTML', reply_markup=menu.start_admin)
        else:
            bot.send_message(
                message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é @por0vos1k", parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "–ó–∞–∫—Ä—ã—Ç—å":
            bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(content_types=['text'])
def receive_message(message):
    if message.chat.id != ADMIN_ID:
        try:
            today = datetime.today()
            date = today.strftime("%Y-%m-%d")
            db.add_message(message.from_user.first_name,
                           message.from_user.last_name, date, message.text, message.chat.id)
            enter_the_text = types.InlineKeyboardMarkup()
            but_1 = types.InlineKeyboardButton(
                text="–û—Ç–≤–µ—Ç–∏—Ç—å", url=f"https://t.me/{message.from_user.username}")
            enter_the_text.row(but_1)
            text = (str(db.return_message_id(message.text))).replace("(", "")
            message_id = text.replace(",)", "")
            msg = bot.send_message(
                ADMIN_ID, f"""<a><b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n<pre>{message.text}</pre>\n\n<b>üôé‚Äç‚ôÇÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\nID: <b>{message.chat.id}</b>\nUsername: <b>{message.from_user.username}</b>\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: <b>{date}</b>\n–ù–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: <pre>{message_id}</pre></a>""", parse_mode='HTML', reply_markup=enter_the_text)
        except Exception as e:
            print(e)
    else:
        try:
            if message.text == "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å":
                msg = bot.send_message(
                    ADMIN_ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:")
                bot.register_next_step_handler(msg, send_answer_1)
            elif message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                users = (((str(db.return_users()).replace(
                    "(", "")).replace(",)", "")).replace("[", "")).replace("]", "")
                messages = (((str(db.return_requests()).replace(
                    "(", "")).replace(",)", "")).replace("[", "")).replace("]", "")
                answers = (((str(db.return_answers()).replace(
                    "(", "")).replace(",)", "")).replace("[", "")).replace("]", "")
                bot.send_message(
                    ADMIN_ID, f"<a>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ @{CHANNEL_URL}:\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users}</b>\n\n<b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{messages}</b>\n–û—Ç–≤–µ—Ç–æ–≤: <b>{answers}</b></a>", reply_markup=menu.close, parse_mode='HTML')
        except Exception as e:
            print(e)


if __name__ == '__main__':
    bot.polling(none_stop=True)


bot.send_message(
    ADMIN_ID, "<a><pre>–ë–æ—Ç –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É!</pre></a>", parse_mode='HTML')
